#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// WiFi credentials
const char* ssid = "realme 7 Pro";          // Replace with your WiFi SSID
const char* password = "tashvi28";          // Replace with your WiFi password

// MQTT broker details
const char* mqttServer = "1bd4a0df136c4f1592d4e1c2b9963a12.s1.eu.hivemq.cloud";
const int mqttPort = 8883;                  // Secure TLS/SSL port
const char* mqttUser = "rawprat";           // HiveMQ username
const char* mqttPassword = "Frozen8642";    // HiveMQ password

// MQTT topics
const char* mqttTopicPot = "testtopic/temp/outTopic/potvalue";
const char* mqttTopicLEDControl = "testtopic/temp/outTopic/LED";
const char* mqttTopicLEDState = "testtopic/temp/outTopic/LEDState";
const char* mqttTopicSwitch = "testtopic/temp/outTopic/switch";

// WiFi and MQTT clients
WiFiClientSecure espClient;
PubSubClient client(espClient);

// Pin assignments
const int potentiometerPin = A0; // Analog pin for potentiometer
const int ledPin = D5;           // GPIO pin for LED
const int switchPin = D4;        // GPIO pin for switch

// Variables for potentiometer
int previousPotValue = -1;

// Variables for switch
bool lastSwitchState = HIGH;
unsigned long lastSwitchTime = 0; // Track the time of the switch press
bool zeroPublished = true;        // Ensure '0' is sent only once after the delay

// Variable for LED state
bool ledState = false;

void callback(char* topic, byte* payload, unsigned int length) {
  char message[length + 1];
  memcpy(message, payload, length);
  message[length] = '\0'; // Null-terminate the message

  // Handle LED control messages
  if (strcmp(topic, mqttTopicLEDControl) == 0) {
    if (strcmp(message, "1") == 0) {
      digitalWrite(ledPin, HIGH); // Turn LED ON
      ledState = true;
      client.publish(mqttTopicLEDState, "1"); // Publish LED state
      Serial.println("LED Turned ON");
    } else if (strcmp(message, "0") == 0) {
      digitalWrite(ledPin, LOW); // Turn LED OFF
      ledState = false;
      client.publish(mqttTopicLEDState, "0"); // Publish LED state
      Serial.println("LED Turned OFF");
    }
  }
}

void setup() {
  Serial.begin(115200);

  // Configure pins
  pinMode(ledPin, OUTPUT);
  pinMode(switchPin, INPUT_PULLUP);

  // Connect to WiFi
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected.");

  // Configure MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
  espClient.setInsecure(); // Simplify SSL setup

  // Connect to MQTT broker
  while (!client.connected()) {
    if (client.connect("ESP8266Client", mqttUser, mqttPassword)) {
      Serial.println("MQTT Connected.");
      client.subscribe(mqttTopicLEDControl); // Subscribe to LED control topic
    } else {
      delay(1000);
    }
  }
}

void loop() {
  // Ensure MQTT connection stays active
  if (!client.connected()) {
    client.connect("ESP8266Client", mqttUser, mqttPassword);
    client.subscribe(mqttTopicLEDControl);
  }
  client.loop();

  // Handle potentiometer
  int potValue = analogRead(potentiometerPin);
  if (abs(potValue - previousPotValue) > 10) { // Adjust threshold as needed
    previousPotValue = potValue;
    float voltage = (potValue / 1023.0) * 3.3;

    char message[50];
    snprintf(message, sizeof(message), "%.2f V", voltage);
    client.publish(mqttTopicPot, message);
    Serial.print("Potentiometer Voltage Published: ");
    Serial.println(message);
  }

  // Handle switch
  bool currentSwitchState = digitalRead(switchPin);
  if (currentSwitchState == LOW && lastSwitchState == HIGH) {
    // Switch pressed
    Serial.println("Switch Pressed: 1");
    client.publish(mqttTopicSwitch, "1"); // Publish "1" for switch pressed
    lastSwitchTime = millis(); // Record the time
    zeroPublished = false;     // Reset zero-publish flag
  }

  // Publish '0' after 5 seconds
  if (!zeroPublished && millis() - lastSwitchTime >= 5000) {
    client.publish(mqttTopicSwitch, "0"); // Publish "0"
    Serial.println("Switch Released: 0");
    zeroPublished = true; // Mark '0' as published
  }

  // Update the last switch state
  lastSwitchState = currentSwitchState;

  delay(10); // Small delay for stability
}
