#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>

// WiFi credentials
const char* ssid = "realme 7 Pro";          // Replace with your WiFi SSID
const char* password = "tashvi28";  // Replace with your WiFi password

// MQTT broker details
const char* mqttServer = "1bd4a0df136c4f1592d4e1c2b9963a12.s1.eu.hivemq.cloud";
const int mqttPort = 8883;               // Secure TLS/SSL port
const char* mqttUser = "rawprat";        // HiveMQ username
const char* mqttPassword = "Frozen8642"; // HiveMQ password
const char* mqttTopicLED = "testtopic/temp/outTopic/LED"; // Topic to control LED

WiFiClientSecure espClient;
PubSubClient client(espClient);

// Pin assignments
const int ledPin = D5; // Pin for LED

// Callback function to handle incoming MQTT messages
void callback(char* topic, byte* payload, unsigned int length) {
  char message[length + 1];
  memcpy(message, payload, length);
  message[length] = '\0'; // Null-terminate the message

  // Check the topic and process the message
  if (strcmp(topic, mqttTopicLED) == 0) {
    if (strcmp(message, "1") == 0) {
      digitalWrite(ledPin, HIGH); // Turn on LED
      Serial.println("LED ON");
    } else if (strcmp(message, "0") == 0) {
      digitalWrite(ledPin, LOW); // Turn off LED
      Serial.println("LED OFF");
    }
  }
}

void setup() {
  Serial.begin(115200);

  // Configure LED pin
  pinMode(ledPin, OUTPUT);

  // Connect to WiFi
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected.");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Configure MQTT
  espClient.setInsecure(); // Disable certificate validation for simplicity
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback); // Attach callback function

  // Connect to MQTT broker
  Serial.print("Connecting to MQTT broker...");
  if (client.connect("ESP8266TestClient", mqttUser, mqttPassword)) {
    Serial.println(" Connected!");

    // Subscribe to LED control topic
    client.subscribe(mqttTopicLED);
    Serial.println("Subscribed to LED topic.");
  } else {
    Serial.print(" Failed to connect to MQTT broker. Error code: ");
    Serial.println(client.state());
  }
}

void loop() {
  // Ensure the MQTT connection remains active
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Reconnecting to MQTT broker...");
    if (client.connect("ESP8266TestClient", mqttUser, mqttPassword)) {
      Serial.println(" Reconnected!");
      client.subscribe(mqttTopicLED); // Re-subscribe to LED topic
    } else {
      Serial.print(" Failed. rc=");
      Serial.println(client.state());
      delay(5000);
    }
  }
}
