#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// WiFi credentials
const char* ssid = "realme 7 Pro";          // Replace with your WiFi SSID
const char* password = "tashvi28";  // Replace with your WiFi password

// MQTT broker details
const char* mqttServer = "1bd4a0df136c4f1592d4e1c2b9963a12.s1.eu.hivemq.cloud";
const int mqttPort = 8883;               // Secure TLS/SSL port
const char* mqttUser = "rawprat";        // HiveMQ username
const char* mqttPassword = "Frozen8642"; // HiveMQ password
const char* mqttTopicSwitch = "testtopic/temp/outTopic/switch"; // Topic to publish switch state

WiFiClientSecure espClient;
PubSubClient client(espClient);

// Pin for switch
const int switchPin = D4; // GPIO pin for the switch

bool lastSwitchState = HIGH; // Track previous switch state
unsigned long lastSwitchTime = 0; // Track the time of the switch press
bool zeroPublished = true; // Ensure '0' is sent only once after the delay

void setup() {
  Serial.begin(115200);
  pinMode(switchPin, INPUT_PULLUP); // Configure switch pin with pull-up

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected.");

  // Configure MQTT
  client.setServer(mqttServer, mqttPort);
  espClient.setInsecure(); // Simplify TLS

  // Connect to MQTT broker
  while (!client.connected()) {
    if (client.connect("ESP8266Client", mqttUser, mqttPassword)) {
      Serial.println("MQTT Connected.");
    } else {
      delay(1000);
    }
  }
}

void loop() {
  // Ensure MQTT connection stays active
  if (!client.connected()) {
    client.connect("ESP8266Client", mqttUser, mqttPassword);
  }
  client.loop();

  // Read current switch state
  bool currentSwitchState = digitalRead(switchPin);

  // Handle switch press
  if (currentSwitchState == LOW && lastSwitchState == HIGH) {
    Serial.println("Switch Pressed: 1");
    client.publish(mqttTopicSwitch, "1"); // Publish '1'
    lastSwitchTime = millis(); // Record the time
    zeroPublished = false;     // Reset zero-publish flag
  }

  // Publish '0' after 5 seconds
  if (!zeroPublished && millis() - lastSwitchTime >= 5000) {
    client.publish(mqttTopicSwitch, "0"); // Publish '0'
    Serial.println("Switch Released: 0");
    zeroPublished = true; // Mark '0' as published
  }

  // Update the last switch state
  lastSwitchState = currentSwitchState;

  delay(10); // Small delay for stability
}
